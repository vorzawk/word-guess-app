{"version":3,"sources":["UserInteraction.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleChange","event","setState","value","target","onSubmit","state","handleSubmit","type","this","onChange","onClick","React","Component","UserInteraction","userResponse","isCorrect","toLowerCase","wordStr","isSubmitted","initialState","isAnsRequested","className","role","aria-label","Prompt","prompt","Clue","isClicked","clue","example","replace","Card","word","App","i","data","renderCard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0cf7775.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n  }\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  onSubmit = () => {\n    const { value } = this.state;\n    this.props.handleSubmit(value);\n  };\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n        <input type=\"button\" value=\"Submit\" onClick={this.onSubmit} />\n      </form>\n    );\n  }\n}\n\nclass UserInteraction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      isSubmitted: false,\n      isCorrect: false,\n      isAnsRequested: false\n    };\n    this.state = this.initialState;\n  }\n\n  handleSubmit = userResponse => {\n    const isCorrect = userResponse.toLowerCase() === this.props.wordStr;\n    const isSubmitted = true;\n    this.setState({ isSubmitted, isCorrect });\n  };\n\n  render() {\n    if (this.state.isAnsRequested) {\n      return (\n        <div className=\"userInteractions\">\n          The correct answer is <strong>{this.props.wordStr}</strong>.\n        </div>\n      );\n    }\n    if (!this.state.isSubmitted) {\n      return (\n        <div className=\"userInteractions\">\n          <Form handleSubmit={this.handleSubmit} />\n        </div>\n      );\n    }\n    if (this.state.isCorrect) {\n      return (\n        <div className=\"userInteractions\">\n          Good job! Your answer is correct{\" \"}\n          <span role=\"img\" aria-label=\"smiling face\">\n            ðŸ˜¸\n          </span>\n        </div>\n      );\n    }\n    /* Submitted response is incorrect */\n    return (\n      <div className=\"userInteractions\">\n        Incorrect answer{\" \"}\n        <span role=\"img\" aria-label=\"frowning face\">\n          ðŸ˜¿\n        </span>\n        <div className=\"userOptions\">\n          <button onClick={() => this.setState(this.initialState)}>\n            Try Again\n          </button>\n          <button onClick={() => this.setState({ isAnsRequested: true })}>\n            Show answer\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserInteraction;\n","import React from \"react\";\nimport UserInteraction from \"./UserInteraction\";\n\nconst Prompt = props => {\n  return (\n    <div className=\"prompt\">\n      <em>{props.prompt}</em>\n    </div>\n  );\n};\n\nclass Clue extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isClicked: false };\n  }\n\n  render() {\n    const clue = this.props.example.replace(this.props.wordStr, \"______\");\n    if (this.state.isClicked) {\n      return <div className=\"clue\"> {clue} </div>;\n    }\n    return (\n      <div\n        className=\"clue-prompt\"\n        onClick={() => this.setState({ isClicked: true })}\n      >\n        Click here for a clue\n      </div>\n    );\n  }\n}\n\nclass Card extends React.Component {\n  prompt = this.props.word[\"definition\"];\n  example = this.props.word[\"example\"];\n  wordStr = this.props.word[\"string\"];\n\n  render() {\n    return (\n      <div className=\"card\">\n        <p>Guess one word for </p>\n        <Prompt prompt={this.prompt} />\n        <Clue example={this.example} wordStr={this.wordStr} />\n        <UserInteraction wordStr={this.wordStr} />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport data from \"./data.json\";\nimport Card from \"./Card\";\n\nclass App extends React.Component {\n  renderCard(i) {\n    let word = data[i];\n    return <Card word={word} />;\n  }\n\n  render() {\n    return (\n      /* Display exactly 8 cards on the screen */\n      <div className=\"app\">\n        <h1> Guess the words </h1>\n        <hr />\n        <div className=\"card-grid\">\n          {this.renderCard(0)}\n          {this.renderCard(1)}\n          {this.renderCard(2)}\n          {this.renderCard(3)}\n          {this.renderCard(4)}\n          {this.renderCard(5)}\n          {this.renderCard(6)}\n          {this.renderCard(7)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}